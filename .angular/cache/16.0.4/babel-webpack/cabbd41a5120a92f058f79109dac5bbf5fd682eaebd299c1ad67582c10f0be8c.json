{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs';\nlet InterceptorService = class InterceptorService {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(req, next) {\n    let clonedRequest = req.clone({\n      setHeaders: {\n        'Authorization': this.getToken(),\n        'emaila': 'nagen@gmail.com'\n      }\n    });\n    return next.handle(clonedRequest).pipe(tap(() => {\n      // to fix solar error\n    }, err => this.redirectToLogin(err)));\n  }\n  getToken() {\n    return sessionStorage.getItem('Authorization') || '';\n  }\n  redirectToLogin(err) {\n    if (err instanceof HttpErrorResponse) {\n      if (err.status === 401) {\n        this.router.navigate(['/login']);\n      }\n      if (err.status === 403) {\n        //hey! your are not authorized to delete this record!!!!\n        this.router.navigate(['/login']);\n      }\n      if (err.status === 500) {\n        this.router.navigate(['/login']);\n      }\n    }\n  }\n};\nInterceptorService = __decorate([Injectable({\n  providedIn: 'root'\n})], InterceptorService);\nexport { InterceptorService };","map":{"version":3,"names":["Injectable","tap","InterceptorService","constructor","router","intercept","req","next","clonedRequest","clone","setHeaders","getToken","handle","pipe","err","redirectToLogin","sessionStorage","getItem","HttpErrorResponse","status","navigate","__decorate","providedIn"],"sources":["C:\\Users\\singh\\Downloads\\AngularRestApi\\angular2023\\src\\app\\services\\interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterceptorService implements HttpInterceptor {\n\n  constructor(private router:Router) { }\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let clonedRequest=req.clone({\n      setHeaders:{\n        'Authorization':this.getToken(),\n         'emaila' :'nagen@gmail.com'\n      }\n      \n    });\n \n    return next.handle(clonedRequest).pipe(\n      tap(\n        () => {\n          // to fix solar error\n        },\n        (err: any) => this.redirectToLogin(err)\n      )\n    );\n   }\n\n  public getToken(){\n    return sessionStorage.getItem('Authorization') || '';\n  }\n\n  redirectToLogin(err: any) {\n\n    if (err instanceof HttpErrorResponse) {\n      if (err.status === 401) {\n       this.router.navigate(['/login']);\n      }\n      if (err.status === 403) {\n        //hey! your are not authorized to delete this record!!!!\n        this.router.navigate(['/login']);\n      }\n      if (err.status === 500) {\n        this.router.navigate(['/login']);\n      }\n    }\n\n\n  }\n \n}\n"],"mappings":";AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAAqBC,GAAG,QAAQ,MAAM;AAKtC,IAAaC,kBAAkB,GAA/B,MAAaA,kBAAkB;EAE7BC,YAAoBC,MAAa;IAAb,KAAAA,MAAM,GAANA,MAAM;EAAW;EACrCC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,aAAa,GAACF,GAAG,CAACG,KAAK,CAAC;MAC1BC,UAAU,EAAC;QACT,eAAe,EAAC,IAAI,CAACC,QAAQ,EAAE;QAC9B,QAAQ,EAAE;;KAGd,CAAC;IAEF,OAAOJ,IAAI,CAACK,MAAM,CAACJ,aAAa,CAAC,CAACK,IAAI,CACpCZ,GAAG,CACD,MAAK;MACH;IAAA,CACD,EACAa,GAAQ,IAAK,IAAI,CAACC,eAAe,CAACD,GAAG,CAAC,CACxC,CACF;EACF;EAEMH,QAAQA,CAAA;IACb,OAAOK,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE;EACtD;EAEAF,eAAeA,CAACD,GAAQ;IAEtB,IAAIA,GAAG,YAAYI,iBAAiB,EAAE;MACpC,IAAIJ,GAAG,CAACK,MAAM,KAAK,GAAG,EAAE;QACvB,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAEjC,IAAIN,GAAG,CAACK,MAAM,KAAK,GAAG,EAAE;QACtB;QACA,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC,IAAIN,GAAG,CAACK,MAAM,KAAK,GAAG,EAAE;QACtB,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;;EAKtC;CAED;AA5CYlB,kBAAkB,GAAAmB,UAAA,EAH9BrB,UAAU,CAAC;EACVsB,UAAU,EAAE;CACb,CAAC,C,EACWpB,kBAAkB,CA4C9B;SA5CYA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}